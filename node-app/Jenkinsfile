pipeline {
    agent {
        docker {
            image 'node:18'
            args '-v /var/run/docker.sock:/var/run/docker.sock' // Allows Docker commands inside container
        }
    }

    environment {
    IMAGE_NAME = "node-app"
    IMAGE_TAG = "build-${BUILD_NUMBER}"
    }

    stages {
        stage('Build') {
            steps {
                echo "üîß Installing dependencies..."
                dir('node-app') {
                    sh 'npm install'
                }
            }
        }

        stage('Build docker image') {
            steps {
                echo "üê≥ Building Docker image..."
                dir('node-app') {
                    withEnv(["IMAGE_NAME=${IMAGE_NAME}", "IMAGE_TAG=${IMAGE_TAG}"]) {
                        sh '''
                            docker build -t $IMAGE_NAME:$IMAGE_TAG .
                            docker image ls
                        '''
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo "‚úÖ Running unit tests..."
                dir('node-app') {
                    sh '''
                        if [ -f package.json ]; then
                            npm test
                        else
                            echo "‚ö†Ô∏è No tests found, failing the pipeline."
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Deliver') {
            steps {
                echo "üöÄ Deployment step (placeholder)..."
                sh 'echo "Deployed!"'
            }
        }

        stage('Clean Up') {
            steps {
                echo "üßπ Cleaning up unused Docker images..."
                sh 'docker image prune -f'
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and deployment successful!'
        }
        failure {
            echo '‚ùå Build failed. Check the logs.'
        }
    }
}
